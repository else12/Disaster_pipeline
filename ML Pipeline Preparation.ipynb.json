{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ML Pipeline Preparation\n",
    "Follow the instructions below to help you create your ML pipeline.\n",
    "### 1. Import libraries and load data from database.\n",
    "- Import Python libraries\n",
    "- Load dataset from database with [`read_sql_table`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_table.html)\n",
    "- Define feature and target variables X and Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import libraries\n",
    "import re\n",
    "import nltk\n",
    "import pickle\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sqlalchemy import create_engine\n",
    "from sklearn.pipeline import Pipeline\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "\n",
    "from sklearn.multioutput import MultiOutputClassifier\n",
    "\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, fbeta_score, precision_recall_fscore_support\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n",
    "\n",
    "nltk.download('stopwords')\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message</th>\n",
       "      <th>original</th>\n",
       "      <th>genre</th>\n",
       "      <th>related</th>\n",
       "      <th>request</th>\n",
       "      <th>offer</th>\n",
       "      <th>aid_related</th>\n",
       "      <th>medical_help</th>\n",
       "      <th>medical_products</th>\n",
       "      <th>...</th>\n",
       "      <th>aid_centers</th>\n",
       "      <th>other_infrastructure</th>\n",
       "      <th>weather_related</th>\n",
       "      <th>floods</th>\n",
       "      <th>storm</th>\n",
       "      <th>fire</th>\n",
       "      <th>earthquake</th>\n",
       "      <th>cold</th>\n",
       "      <th>other_weather</th>\n",
       "      <th>direct_report</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Weather update - a cold front from Cuba that c...</td>\n",
       "      <td>Un front froid se retrouve sur Cuba ce matin. ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Is the Hurricane over or is it not over</td>\n",
       "      <td>Cyclone nan fini osinon li pa fini</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Looking for someone but no name</td>\n",
       "      <td>Patnm, di Maryani relem pou li banm nouvel li ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>says: west side of Haiti, rest of the country ...</td>\n",
       "      <td>facade ouest d Haiti et le reste du pays aujou...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                            message  \\\n",
       "0   2  Weather update - a cold front from Cuba that c...   \n",
       "1   7            Is the Hurricane over or is it not over   \n",
       "2   8                    Looking for someone but no name   \n",
       "3   9  UN reports Leogane 80-90 destroyed. Only Hospi...   \n",
       "4  12  says: west side of Haiti, rest of the country ...   \n",
       "\n",
       "                                            original   genre  related  \\\n",
       "0  Un front froid se retrouve sur Cuba ce matin. ...  direct        1   \n",
       "1                 Cyclone nan fini osinon li pa fini  direct        1   \n",
       "2  Patnm, di Maryani relem pou li banm nouvel li ...  direct        1   \n",
       "3  UN reports Leogane 80-90 destroyed. Only Hospi...  direct        1   \n",
       "4  facade ouest d Haiti et le reste du pays aujou...  direct        1   \n",
       "\n",
       "   request  offer  aid_related  medical_help  medical_products      ...        \\\n",
       "0        0      0            0             0                 0      ...         \n",
       "1        0      0            1             0                 0      ...         \n",
       "2        0      0            0             0                 0      ...         \n",
       "3        1      0            1             0                 1      ...         \n",
       "4        0      0            0             0                 0      ...         \n",
       "\n",
       "   aid_centers  other_infrastructure  weather_related  floods  storm  fire  \\\n",
       "0            0                     0                0       0      0     0   \n",
       "1            0                     0                1       0      1     0   \n",
       "2            0                     0                0       0      0     0   \n",
       "3            0                     0                0       0      0     0   \n",
       "4            0                     0                0       0      0     0   \n",
       "\n",
       "   earthquake  cold  other_weather  direct_report  \n",
       "0           0     0              0              0  \n",
       "1           0     0              0              0  \n",
       "2           0     0              0              0  \n",
       "3           0     0              0              0  \n",
       "4           0     0              0              0  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load data from database\n",
    "engine = create_engine('sqlite:///InsertDatabaseName.db')\n",
    "df =  pd.read_sql_table('InsertDatabaseName', engine)\n",
    "\n",
    "#ines= pd.read_sql_table('InsertDatabaseName', engine)\n",
    "\n",
    "X = df['message'].values\n",
    "Y = df.drop(['id','message','original','genre'], axis=1)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Write a tokenization function to process your text data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize(text):\n",
    "    \n",
    "    text = re.sub(r\"[^a-zA-Z0-9]\", \" \", text.lower())\n",
    "\n",
    "    tokens = word_tokenize(text)  \n",
    "    \n",
    "    tokens  = [w for w in tokens if   w not in stopwords.words(\"english\")]\n",
    "    #pos_tagged_sent = nltk.pos_tag(text)\n",
    "\n",
    "    #nouns = [tag[0] for tag in pos_tagged_sent if tag[1]=='NN']\n",
    "    # initiate lemmatizer\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    \n",
    "    #iterate through each token\n",
    "    clean_tokens = []\n",
    "    for tok in tokens:      \n",
    "        #lemmatize, normalize case, and remove leading/trailing white space\n",
    "         clean_tok =  lemmatizer.lemmatize(tok).lower().strip( )\n",
    "         #clean_tok = stemmer.stem(tok).lower().strip( )\n",
    "         clean_tokens.append(clean_tok)\n",
    "       \n",
    "    return clean_tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['un', 'report', 'leogane', '80', '90', 'destroyed', 'hospital', 'st', 'croix', 'functioning', 'need', 'supply', 'desperately']\n"
     ]
    }
   ],
   "source": [
    "words=tokenize(X[3])\n",
    "print(words)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Build a machine learning pipeline\n",
    "This machine pipeline should take in the `message` column as input and output classification results on the other 36 categories in the dataset. You may find the [MultiOutputClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html) helpful for predicting multiple target variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "        ('vect', CountVectorizer(tokenizer=tokenize)),\n",
    "        ('tfidf', TfidfTransformer()),\n",
    "        ('clf',  MultiOutputClassifier(RandomForestClassifier(random_state=100)))\n",
    "         ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Train pipeline\n",
    "- Split data into train and test sets\n",
    "- Train pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('vect', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip...\n",
       "            oob_score=False, random_state=100, verbose=0, warm_start=False),\n",
       "           n_jobs=1))])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n",
    "pipeline.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Test your model\n",
    "Report the f1 score, precision and recall for each output category of the dataset. You can do this by iterating through the columns and calling sklearn's `classification_report` on each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['related', 'request', 'offer', 'aid_related', 'medical_help', 'medical_products', 'search_and_rescue', 'security', 'military', 'child_alone', 'water', 'food', 'shelter', 'clothing', 'money', 'missing_people', 'refugees', 'death', 'other_aid', 'infrastructure_related', 'transport', 'buildings', 'electricity', 'tools', 'hospitals', 'shops', 'aid_centers', 'other_infrastructure', 'weather_related', 'floods', 'storm', 'fire', 'earthquake', 'cold', 'other_weather', 'direct_report']\n"
     ]
    }
   ],
   "source": [
    "category_names=list(Y.columns)\n",
    "print(category_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = pipeline.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total Accuracy: 94.41\n"
     ]
    }
   ],
   "source": [
    "tot_accuracy = (y_pred == y_test).mean().mean()\n",
    "print('total Accuracy: %2.2f'% (tot_accuracy*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        precision    recall  f1-score   support\n",
      "\n",
      "               related       0.77      0.41      0.53      1332\n",
      "               request       0.00      0.00      0.00        36\n",
      "                 offer       0.73      0.62      0.67      3219\n",
      "           aid_related       0.60      0.10      0.17       638\n",
      "          medical_help       0.69      0.08      0.15       418\n",
      "      medical_products       0.66      0.11      0.19       192\n",
      "     search_and_rescue       0.00      0.00      0.00       144\n",
      "              security       0.63      0.10      0.17       245\n",
      "              military       0.00      0.00      0.00         0\n",
      "           child_alone       0.80      0.47      0.59       500\n",
      "                 water       0.86      0.51      0.64       878\n",
      "                  food       0.76      0.30      0.43       705\n",
      "               shelter       0.81      0.15      0.25       115\n",
      "              clothing       0.70      0.04      0.08       170\n",
      "                 money       0.00      0.00      0.00        92\n",
      "        missing_people       0.68      0.07      0.12       260\n",
      "              refugees       0.83      0.11      0.19       366\n",
      "                 death       0.46      0.06      0.11      1033\n",
      "             other_aid       0.23      0.01      0.01       505\n",
      "infrastructure_related       0.56      0.07      0.12       362\n",
      "             transport       0.67      0.18      0.28       392\n",
      "             buildings       0.75      0.04      0.07       168\n",
      "           electricity       0.00      0.00      0.00        48\n",
      "                 tools       0.00      0.00      0.00        78\n",
      "             hospitals       0.00      0.00      0.00        28\n",
      "                 shops       0.00      0.00      0.00       103\n",
      "           aid_centers       0.20      0.01      0.01       341\n",
      "  other_infrastructure       0.83      0.63      0.72      2163\n",
      "       weather_related       0.85      0.39      0.54       623\n",
      "                floods       0.75      0.43      0.55       738\n",
      "                 storm       0.00      0.00      0.00        83\n",
      "                  fire       0.87      0.62      0.73       702\n",
      "            earthquake       0.79      0.09      0.16       171\n",
      "                  cold       0.53      0.02      0.04       415\n",
      "         other_weather       0.71      0.29      0.41      1544\n",
      "\n",
      "           avg / total       0.69      0.35      0.43     18807\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1428: UserWarning: labels size, 35, does not match size of target_names, 36\n",
      "  .format(len(labels), len(target_names))\n",
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1137: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "print( classification_report(y_test.iloc[:, 1:].values, np.array([x[1:] for x in y_pred]), target_names=category_names))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------\n",
      "Category: related \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.62      0.46      0.52      1873\n",
      "          1       0.84      0.90      0.87      5934\n",
      "          2       0.26      0.40      0.31        58\n",
      "\n",
      "avg / total       0.78      0.79      0.78      7865\n",
      "\n",
      "Accuracy of                   related: 0.79\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: request \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.89      0.97      0.93      6533\n",
      "          1       0.77      0.41      0.53      1332\n",
      "\n",
      "avg / total       0.87      0.88      0.86      7865\n",
      "\n",
      "Accuracy of                   request: 0.88\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: offer \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      7829\n",
      "          1       0.00      0.00      0.00        36\n",
      "\n",
      "avg / total       0.99      1.00      0.99      7865\n",
      "\n",
      "Accuracy of                     offer: 1.00\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: aid_related \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.76      0.84      0.80      4646\n",
      "          1       0.73      0.62      0.67      3219\n",
      "\n",
      "avg / total       0.75      0.75      0.75      7865\n",
      "\n",
      "Accuracy of               aid_related: 0.75\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: medical_help \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      0.99      0.96      7227\n",
      "          1       0.60      0.10      0.17       638\n",
      "\n",
      "avg / total       0.90      0.92      0.90      7865\n",
      "\n",
      "Accuracy of              medical_help: 0.92\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: medical_products \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      7447\n",
      "          1       0.69      0.08      0.15       418\n",
      "\n",
      "avg / total       0.94      0.95      0.93      7865\n",
      "\n",
      "Accuracy of          medical_products: 0.95\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: search_and_rescue \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      7673\n",
      "          1       0.66      0.11      0.19       192\n",
      "\n",
      "avg / total       0.97      0.98      0.97      7865\n",
      "\n",
      "Accuracy of         search_and_rescue: 0.98\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: security \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      7721\n",
      "          1       0.00      0.00      0.00       144\n",
      "\n",
      "avg / total       0.96      0.98      0.97      7865\n",
      "\n",
      "Accuracy of                  security: 0.98\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: military \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.98      7620\n",
      "          1       0.63      0.10      0.17       245\n",
      "\n",
      "avg / total       0.96      0.97      0.96      7865\n",
      "\n",
      "Accuracy of                  military: 0.97\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: child_alone \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      7865\n",
      "\n",
      "avg / total       1.00      1.00      1.00      7865\n",
      "\n",
      "Accuracy of               child_alone: 1.00\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: water \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      0.99      0.98      7365\n",
      "          1       0.80      0.47      0.59       500\n",
      "\n",
      "avg / total       0.95      0.96      0.95      7865\n",
      "\n",
      "Accuracy of                     water: 0.96\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: food \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      0.99      0.96      6987\n",
      "          1       0.86      0.51      0.64       878\n",
      "\n",
      "avg / total       0.93      0.94      0.93      7865\n",
      "\n",
      "Accuracy of                      food: 0.94\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: shelter \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      0.99      0.96      7160\n",
      "          1       0.76      0.30      0.43       705\n",
      "\n",
      "avg / total       0.92      0.93      0.91      7865\n",
      "\n",
      "Accuracy of                   shelter: 0.93\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: clothing \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      7750\n",
      "          1       0.81      0.15      0.25       115\n",
      "\n",
      "avg / total       0.98      0.99      0.98      7865\n",
      "\n",
      "Accuracy of                  clothing: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: money \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      7695\n",
      "          1       0.70      0.04      0.08       170\n",
      "\n",
      "avg / total       0.97      0.98      0.97      7865\n",
      "\n",
      "Accuracy of                     money: 0.98\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: missing_people \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      7773\n",
      "          1       0.00      0.00      0.00        92\n",
      "\n",
      "avg / total       0.98      0.99      0.98      7865\n",
      "\n",
      "Accuracy of            missing_people: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: refugees \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.98      7605\n",
      "          1       0.68      0.07      0.12       260\n",
      "\n",
      "avg / total       0.96      0.97      0.96      7865\n",
      "\n",
      "Accuracy of                  refugees: 0.97\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: death \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      7499\n",
      "          1       0.83      0.11      0.19       366\n",
      "\n",
      "avg / total       0.95      0.96      0.94      7865\n",
      "\n",
      "Accuracy of                     death: 0.96\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: other_aid \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.87      0.99      0.93      6832\n",
      "          1       0.46      0.06      0.11      1033\n",
      "\n",
      "avg / total       0.82      0.87      0.82      7865\n",
      "\n",
      "Accuracy of                 other_aid: 0.87\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: infrastructure_related \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      1.00      0.97      7360\n",
      "          1       0.23      0.01      0.01       505\n",
      "\n",
      "avg / total       0.89      0.93      0.91      7865\n",
      "\n",
      "Accuracy of    infrastructure_related: 0.93\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: transport \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      7503\n",
      "          1       0.56      0.07      0.12       362\n",
      "\n",
      "avg / total       0.94      0.95      0.94      7865\n",
      "\n",
      "Accuracy of                 transport: 0.95\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: buildings \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      7473\n",
      "          1       0.67      0.18      0.28       392\n",
      "\n",
      "avg / total       0.94      0.95      0.94      7865\n",
      "\n",
      "Accuracy of                 buildings: 0.95\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: electricity \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      7697\n",
      "          1       0.75      0.04      0.07       168\n",
      "\n",
      "avg / total       0.97      0.98      0.97      7865\n",
      "\n",
      "Accuracy of               electricity: 0.98\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: tools \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      1.00      7817\n",
      "          1       0.00      0.00      0.00        48\n",
      "\n",
      "avg / total       0.99      0.99      0.99      7865\n",
      "\n",
      "Accuracy of                     tools: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: hospitals \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      1.00      7787\n",
      "          1       0.00      0.00      0.00        78\n",
      "\n",
      "avg / total       0.98      0.99      0.99      7865\n",
      "\n",
      "Accuracy of                 hospitals: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: shops \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      7837\n",
      "          1       0.00      0.00      0.00        28\n",
      "\n",
      "avg / total       0.99      1.00      0.99      7865\n",
      "\n",
      "Accuracy of                     shops: 1.00\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: aid_centers \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      7762\n",
      "          1       0.00      0.00      0.00       103\n",
      "\n",
      "avg / total       0.97      0.99      0.98      7865\n",
      "\n",
      "Accuracy of               aid_centers: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: other_infrastructure \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      7524\n",
      "          1       0.20      0.01      0.01       341\n",
      "\n",
      "avg / total       0.92      0.96      0.94      7865\n",
      "\n",
      "Accuracy of      other_infrastructure: 0.96\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: weather_related \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.87      0.95      0.91      5702\n",
      "          1       0.83      0.63      0.72      2163\n",
      "\n",
      "avg / total       0.86      0.86      0.86      7865\n",
      "\n",
      "Accuracy of           weather_related: 0.86\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: floods \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      0.99      0.97      7242\n",
      "          1       0.85      0.39      0.54       623\n",
      "\n",
      "avg / total       0.94      0.95      0.94      7865\n",
      "\n",
      "Accuracy of                    floods: 0.95\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: storm \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      0.98      0.96      7127\n",
      "          1       0.75      0.43      0.55       738\n",
      "\n",
      "avg / total       0.93      0.93      0.92      7865\n",
      "\n",
      "Accuracy of                     storm: 0.93\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: fire \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      7782\n",
      "          1       0.00      0.00      0.00        83\n",
      "\n",
      "avg / total       0.98      0.99      0.98      7865\n",
      "\n",
      "Accuracy of                      fire: 0.99\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: earthquake \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      0.99      0.98      7163\n",
      "          1       0.87      0.62      0.73       702\n",
      "\n",
      "avg / total       0.96      0.96      0.96      7865\n",
      "\n",
      "Accuracy of                earthquake: 0.96\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: cold \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      7694\n",
      "          1       0.79      0.09      0.16       171\n",
      "\n",
      "avg / total       0.98      0.98      0.97      7865\n",
      "\n",
      "Accuracy of                      cold: 0.98\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: other_weather \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      7450\n",
      "          1       0.53      0.02      0.04       415\n",
      "\n",
      "avg / total       0.93      0.95      0.92      7865\n",
      "\n",
      "Accuracy of             other_weather: 0.95\n",
      "-----------------------------------------------\n",
      "---------------------------------------------\n",
      "Category: direct_report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          0       0.85      0.97      0.91      6321\n",
      "          1       0.71      0.29      0.41      1544\n",
      "\n",
      "avg / total       0.82      0.84      0.81      7865\n",
      "\n",
      "Accuracy of             direct_report: 0.84\n",
      "-----------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#print( classification_report(y_test.iloc[:, i:].values, np.array([x[1:] for x in y_pred]), target_names=categories))\n",
    "\n",
    "for i in range(len(category_names)):\n",
    "        print('---------------------------------------------')\n",
    "        print(\"Category:\", category_names[i],\"\\n\", classification_report(y_test.iloc[:, i].values, y_pred[:, i]))\n",
    "        print('Accuracy of %25s: %.2f' %(category_names[i], accuracy_score(y_test.iloc[:, i].values, y_pred[:,i])))\n",
    "        print('-----------------------------------------------')\n",
    "\n",
    "#print(classification_report(y_test, y_pred, target_names=labels))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def calc_scores(y_test, y_pred):\n",
    "    labels = category_names\n",
    "    res =[]\n",
    "    precision =0\n",
    "    recall=0\n",
    "    f1score =0\n",
    "    for i in range(len(category_names)):\n",
    "         res = (precision_recall_fscore_support(y_test.iloc[:,i].values, y_pred[:,i], average='weighted'))\n",
    "         precision += res[0]\n",
    "         recall += res[1]\n",
    "         f1score += res[2]\n",
    "     \n",
    "    precision = precision/len(category_names)\n",
    "    recall = recall/len(category_names)\n",
    "    f1score = f1score/len(category_names)\n",
    "\n",
    "    print('Average  Weighted Prediction Scores:')\n",
    "    print (\"Precision: {:2f} Recall: {:2f}  F1-Score: {:2f}\".format(precision*100, recall*100, f1score*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Improve your model\n",
    "Use grid search to find better parameters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model():\n",
    "    pipeline = Pipeline([\n",
    "        ('vect', CountVectorizer(tokenizer=tokenize)),\n",
    "        ('tfidf', TfidfTransformer()),\n",
    "        ('clf',  MultiOutputClassifier(RandomForestClassifier(random_state=100)))\n",
    "         ])\n",
    "    parameters = {'clf__estimator__n_estimators': [50, 100] ,\n",
    "                  'clf__estimator__min_samples_split': [2, 4]\n",
    "                 }\n",
    "    #scorer1 = make_scorer(precision_recall_fscore_support(X_train, y_train,beta=1.0, average='weighted'), greater_is_better = True)\n",
    "    cv = GridSearchCV(pipeline, param_grid=parameters, return_train_score=True, verbose=2) # n_jobs=1, cv=1)\n",
    "    return cv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Test your model\n",
    "Show the accuracy, precision, and recall of the tuned model.  \n",
    "\n",
    "Since this project focuses on code quality, process, and  pipelines, there is no minimum performance metric needed to pass. However, make sure to fine tune your models for accuracy, precision and recall to make your project stand out - especially for your portfolio!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = build_model()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 4 candidates, totalling 12 fits\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50, total= 4.1min\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50 \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:  5.3min remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50, total= 4.1min\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=50, total= 4.1min\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100, total= 6.9min\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100, total= 6.9min\n",
      "[CV] clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=2, clf__estimator__n_estimators=100, total= 6.9min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50, total= 3.6min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50, total= 3.6min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=50, total= 3.7min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100, total= 6.0min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100, total= 6.0min\n",
      "[CV] clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__min_samples_split=4, clf__estimator__n_estimators=100, total= 6.0min\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed: 77.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1h 26min 11s, sys: 2min 6s, total: 1h 28min 18s\n",
      "Wall time: 1h 28min 40s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score='raise',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('vect', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip...\n",
       "            oob_score=False, random_state=100, verbose=0, warm_start=False),\n",
       "           n_jobs=1))]),\n",
       "       fit_params=None, iid=True, n_jobs=1,\n",
       "       param_grid={'clf__estimator__n_estimators': [50, 100], 'clf__estimator__min_samples_split': [2, 4]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "       scoring=None, verbose=2)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time model.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Mean Score:\n",
      "precision: 0.9883930031060978 Recall 0.9962672333932755 F-Score: 0.9268704702740996\n"
     ]
    }
   ],
   "source": [
    "results = model.cv_results_\n",
    "\n",
    "res= results['mean_train_score']\n",
    "print('Training Mean Score:')\n",
    "print('precision:', res[0], 'Recall', res[1], 'F-Score:', res[2])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total Accuracy: 94.79\n"
     ]
    }
   ],
   "source": [
    "tot_accuracy = (y_pred == y_test).mean().mean()\n",
    "print('total Accuracy: %2.2f'% (tot_accuracy*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_scores(y_test, y_pred):\n",
    "    labels = category_names\n",
    "    res =[]\n",
    "    precision =0\n",
    "    recall=0\n",
    "    f1score =0\n",
    "    for i in range(len(category_names)):\n",
    "         res = (precision_recall_fscore_support(y_test.iloc[:,i].values, y_pred[:,i], average='weighted'))\n",
    "         precision += res[0]\n",
    "         recall += res[1]\n",
    "         f1score += res[2]\n",
    "     \n",
    "    precision = precision/len(category_names)\n",
    "    recall = recall/len(category_names)\n",
    "    f1score = f1score/len(category_names)\n",
    "\n",
    "    print('Average  Weighted Prediction Scores:')\n",
    "    print (\"Precision: {:2f} Recall: {:2f}  F1-Score: {:2f}\".format(precision*100, recall*100, f1score*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average  Weighted Prediction Scores:\n",
      "Precision: 93.785361 Recall: 94.790916  F1-Score: 93.607699\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "calc_scores(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Try improving your model further. Here are a few ideas:\n",
    "* try other machine learning algorithms\n",
    "* add other features besides the TF-IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model_1():\n",
    "    pipeline = Pipeline([\n",
    "        ('vect', CountVectorizer(tokenizer=tokenize)),\n",
    "        ('tfidf', TfidfTransformer()),\n",
    "        ('clf',  MultiOutputClassifier(AdaBoostClassifier()))\n",
    "         ])\n",
    "    parameters = {'clf__estimator__n_estimators': [50, 100] ,\n",
    "                  'clf__estimator__learning_rate': [0.1, 0.01]\n",
    "                 }\n",
    "    #scorer1 = make_scorer(precision_recall_fscore_support(X_train, y_train,beta=1.0, average='weighted'), greater_is_better = True)\n",
    "    cv = GridSearchCV(pipeline, param_grid=parameters, return_train_score=True, verbose=2) # n_jobs=1, cv=1)\n",
    "    return cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "model1 = build_model_1()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 4 candidates, totalling 12 fits\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50 \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:  3.2min remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100, total= 3.3min\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100, total= 3.3min\n",
      "[CV] clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.1, clf__estimator__n_estimators=100, total= 3.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=50, total= 2.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100, total= 3.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100, total= 3.3min\n",
      "[CV] clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100 \n",
      "[CV]  clf__estimator__learning_rate=0.01, clf__estimator__n_estimators=100, total= 3.3min\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed: 45.2min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 47min 7s, sys: 2min 2s, total: 49min 10s\n",
      "Wall time: 49min 23s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score='raise',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('vect', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip...mator=None,\n",
       "          learning_rate=1.0, n_estimators=50, random_state=None),\n",
       "           n_jobs=1))]),\n",
       "       fit_params=None, iid=True, n_jobs=1,\n",
       "       param_grid={'clf__estimator__n_estimators': [50, 100], 'clf__estimator__learning_rate': [0.1, 0.01]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "       scoring=None, verbose=2)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time model1.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_1 = model1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Score:\n",
      "precision: 0.20843550760176557 Recall 0.21486567489510108 F-Score: 0.19176066699362435\n",
      "{'mean_fit_time': array([109.19427752, 166.41801357, 110.83859968, 167.62501287]), 'std_fit_time': array([0.49553856, 0.89195271, 0.34641401, 0.44384039]), 'mean_score_time': array([28.24881236, 30.14195251, 28.21207698, 30.03291702]), 'std_score_time': array([0.18119357, 0.18130628, 0.05340255, 0.05766796]), 'param_clf__estimator__learning_rate': masked_array(data=[0.1, 0.1, 0.01, 0.01],\n",
      "             mask=[False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_clf__estimator__n_estimators': masked_array(data=[50, 100, 50, 100],\n",
      "             mask=[False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'clf__estimator__learning_rate': 0.1, 'clf__estimator__n_estimators': 50}, {'clf__estimator__learning_rate': 0.1, 'clf__estimator__n_estimators': 100}, {'clf__estimator__learning_rate': 0.01, 'clf__estimator__n_estimators': 50}, {'clf__estimator__learning_rate': 0.01, 'clf__estimator__n_estimators': 100}], 'split0_test_score': array([0.20271375, 0.20500245, 0.1845676 , 0.18424064]), 'split1_test_score': array([0.20369462, 0.21154161, 0.19192415, 0.18914501]), 'split2_test_score': array([0.21186856, 0.21709989, 0.19699199, 0.19731895]), 'mean_test_score': array([0.20609231, 0.21121465, 0.19116124, 0.19023486]), 'std_test_score': array([0.00410401, 0.00494416, 0.00510084, 0.00539453]), 'rank_test_score': array([2, 1, 3, 4], dtype=int32), 'split0_train_score': array([0.21252248, 0.2204512 , 0.19527546, 0.19470329]), 'split1_train_score': array([0.20475723, 0.21105117, 0.19020762, 0.18603891]), 'split2_train_score': array([0.20802681, 0.21309465, 0.18979892, 0.19053458]), 'mean_train_score': array([0.20843551, 0.21486567, 0.19176067, 0.19042559]), 'std_train_score': array([0.00318329, 0.00403671, 0.00249093, 0.00353806])}\n"
     ]
    }
   ],
   "source": [
    "# from AdaBoost, weighted training  score values\n",
    "results = model1.cv_results_\n",
    "\n",
    "res= results['mean_train_score']\n",
    "print('Mean Score:')\n",
    "print('precision:', res[0], 'Recall', res[1], 'F-Score:', res[2])\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total Accuracy: 94.37\n"
     ]
    }
   ],
   "source": [
    "tot_avg_accuracy_1 = (y_pred_1 == y_test).mean().mean()\n",
    "print('total Accuracy from prediction: %2.2f'% (tot_avg_accuracy_1*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average  Weighted Prediction Scores:\n",
      "Precision: 93.151415 Recall: 94.373102  F1-Score: 92.842614\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "calc_scores(y_test, y_pred_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. Export your model as a pickle file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "pickle.dump(model1, open(\"classifier.pkl\", \"wb\" ) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10. Use this notebook to complete `train.py`\n",
    "Use the template file attached in the Resources folder to write a script that runs the steps above to create a database and export a model based on a new dataset specified by the user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
